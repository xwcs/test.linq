// Generated by .NET Reflector from C:\WINDOWS\Microsoft.Net\assembly\GAC_MSIL\DevExpress.XtraLayout.v15.1\v4.0_15.1.8.0__b88d1754d700e49a\DevExpress.XtraLayout.v15.1.dll
namespace DevExpress.XtraDataLayout
{
    using DevExpress.Data;
    using DevExpress.Data.Utils;
    using DevExpress.Utils;
    using DevExpress.XtraEditors;
    using DevExpress.XtraEditors.Repository;
    using DevExpress.XtraLayout;
    using System;
    using System.Collections;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Drawing;
    using System.Linq;
    using System.Reflection;
    using System.Runtime.InteropServices;
    using System.Windows.Forms;
    
    public class LayoutElementsBindingInfoHelperExt : LayoutElementsBindingInfoHelper
	{

		private DataLayoutControl targetLayout; //we need it cause it is private in original class

		public LayoutElementsBindingInfoHelperExt(DataLayoutControl dataLayout) : base(dataLayout)
		{
			targetLayout = dataLayout; 
		}

		protected override bool IsSimpleType(Hashtable dataTypeHashtable, System.Type checkDataType, bool checkProperties = true)
        {
            try
            {
                return this.IsSimpleTypeCore(dataTypeHashtable, checkDataType);
            }
            catch
            {
                return true;
            }
        }

		private bool IsSimpleTypeCore(Hashtable dataTypeHashtable, System.Type checkDataType) =>
			((checkDataType == null) || (!checkDataType.IsClass || (checkDataType.IsEnum || (checkDataType.IsPrimitive || ((checkDataType == typeof(string)) || ((checkDataType == typeof(DateTime)) || ((checkDataType == typeof(byte[])) || ((checkDataType == typeof(Image)) || (checkDataType.IsSubclassOf(typeof(Image)) || ((dataTypeHashtable != null) && dataTypeHashtable.ContainsKey(checkDataType)))))))))));


		private bool CheckInfo(DataColumnInfo info)
		{
			if (info.PropertyDescriptor == null)
			{
				return true;
			}
			AnnotationAttributes attributes = new AnnotationAttributes(info.PropertyDescriptor);
			return attributes.AutoGenerateField.GetValueOrDefault(true);
		}

		private bool CheckDataType(System.Type dataType, DataColumnInfoCollection columns)
		{
			if ((columns == null) || (columns.Count <= 0))
			{
				return false;
			}
			PropertyInfo[] properties = dataType.GetProperties();
			try {
				IEnumerator enumerator = columns.GetEnumerator();
                while (enumerator.MoveNext())
				{
					Func<PropertyInfo, bool> predicate = null;
					DataColumnInfo item = (DataColumnInfo)enumerator.Current;
					if (predicate == null)
					{
						predicate = e => e.Name == item.Name;
					}
					if (!properties.Any<PropertyInfo>(predicate))
					{
						return false;
					}
				}
			} finally { 
			}
			return true;
		}

		public new LayoutElementsBindingInfo CreateDataLayoutElementsBindingInfo()
		{
			ICollection fieldsList = ((DataLayoutControlDesignerMethods)this.targetLayout).GetFieldsList();
			return new LayoutElementsBindingInfo(this.CreateListElementBindingInfoFromFieldList(fieldsList, string.Empty, null, null));
		}

		private List<LayoutElementBindingInfo> CreateListElementBindingInfoFromFieldList(ICollection dataColumnInfoCollection, string dataMember, Hashtable dataTypeHashtable, DataColumnInfo parentInfo)
		{
			List<LayoutElementBindingInfo> list = new List<LayoutElementBindingInfo>();
			try
			{
				IEnumerator enumerator = dataColumnInfoCollection.GetEnumerator();
                while (enumerator.MoveNext())
				{
					Func<PropertyInfo, bool> predicate = null;
					DataColumnInfo info = (DataColumnInfo)enumerator.Current;
					dataTypeHashtable = this.InitializeHashtableIfNeed(dataTypeHashtable, info);
					if (info.Browsable && this.CheckInfo(info))
					{
						System.Type dataType = info.GetDataType();
						LayoutElementBindingInfoExt item = new LayoutElementBindingInfoExt(info)
						{
							DataMember = GetDataMemberName(dataMember, info)
						};
						list.Add(item);
						if ((this.targetLayout.AllowGeneratingNestedGroups == DefaultBoolean.True) && !this.IsSimpleType(dataTypeHashtable, dataType, true))
						{
							if (parentInfo != null)
							{
								if (predicate == null)
								{
									predicate = e => e.Name == info.Name;
								}
								if (!parentInfo.GetDataType().GetProperties().Any<PropertyInfo>(predicate))
								{
									continue;
								}
							}
							Hashtable hashtable = new Hashtable();
							if (dataTypeHashtable != null)
							{
								hashtable = dataTypeHashtable.Clone() as Hashtable;
							}
							hashtable.Add(dataType, null);
							DataColumnInfoCollection dataColumnInfoCollectionFromType = GetDataColumnInfoCollectionFromType(dataType);
							if (this.CheckDataType(dataType, dataColumnInfoCollectionFromType))
							{
								item.InnerLayoutElementsBindingInfo = new LayoutElementsBindingInfo(this.CreateListElementBindingInfoFromFieldList(dataColumnInfoCollectionFromType, GetDataMemberName(dataMember, info), hashtable, info));
							}
						}
					}
				}
			} finally { 
			}
			return list;
		}

		private static string GetDataMemberName(string dataMember, DataColumnInfo info)
		{
			if (!string.IsNullOrEmpty(dataMember))
			{
				return (dataMember + "." + info.Name);
			}
			return info.Name;
		}

		private static DataColumnInfoCollection GetDataColumnInfoCollectionFromType(System.Type type)
		{
			PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(type);
			DataColumnInfoCollection infos = new DataColumnInfoCollection();
			foreach (PropertyDescriptor descriptor in properties)
			{
				infos.Add(descriptor);
			}
			return infos;
		}
	}
}
